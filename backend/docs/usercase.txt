Экран 0. Старт / создание сессии

Что видит:
– Титул «Оформление заявки».
– Кнопка «Начать».
– Короткий текст о том, что регистрация не требуется.
– Прогресс: 0 % / шаг «Введение».

Действие: жмём «Начать».

API:
POST /api/v1/applications/forms/{survey_code}/sessions/ → 201 { public_id }
Фронт сохраняет public_id (в памяти/LS) и полагается на cookie для сессии.

На успех: перейти на Экран 1 с public_id.
На ошибку: показать баннер «Не удалось начать сессию» + кнопка «Повторить».

⸻

Экран 1. Введение (s0_intro)

Что видит:
– Заголовок: «Согласие и кто заполняет».
– Переключатель q_agree: чексбокс «Согласен(на) с условиями обработки данных».
– Селект q_who_fills: «Кто заполняет?» (варианты: self/parent/guardian/relative).
– Кнопка «Далее» (неактивна, пока не отмечено согласие).
– Прогресс: 25 %.

Что вводим:
– Ставим галочку согласия.
– Выбираем «Я заполняю сам(а)» (self).

API при сохранении черновика:
PATCH /api/v1/applications/{public_id}/draft/patch/

{
  "answers": [
    {"question_code":"q_agree","value":true},
    {"question_code":"q_who_fills","value":"self"}
  ]
}

Переход на следующий шаг:
Кнопка «Далее» → POST /api/v1/applications/{public_id}/next/ → ответ с current_step = s1_basic.

Ошибки/валидация:
– Если нет q_agree: true → локальная подсказка и/или ошибка из API.

⸻

Экран 2. Основные данные (s1_basic)

Что видит:
Поля (обязательные помечены *):
– q_fullname (текст), подсказка «как в документе»
– q_dob (дата), подсказка «не может быть в будущем»
– q_city (текст)
– q_phone (телефон), маска +7 (XXX) XXX-XX-XX, подсказка про формат
– q_email (email)
– q_what_to_buy (селект: wheelchair/addon/parts)
Доп. чекбоксы/селекты (необязательные): q_tsr_certificate_has, q_other_funds_active, q_need_consulting (multiselect), q_promo_capability, q_positioning_tips, q_esign_ready.
– Кнопки: «Назад», «Далее».
– Прогресс: 50 %.

Что вводим (наш кейс):
ФИО, дата рождения, город, телефон в валидном формате РФ, email, «Коляска (ТСР)».

Сохранение черновика (по «Далее» или авто-сейв):
PATCH /draft/patch/ с массивом answers (как выше).

Типовые ошибки:
– q_phone — «Некорректный формат телефона» → показать под полем.
– q_email — формат email.
– q_dob — дата в будущем → подсветить поле.

Переход:
POST /next/ → current_step = s2_story_adult.

⸻

Экран 3. История (взрослый) (s2_story_adult)

Что видит:
Обязательные:
– q_diagnosis_main (текст) — «Укажите диагноз»
– q_health_state (textarea) — «Состояние здоровья и ограничения»
– q_diagnosis_when (текст) — «Когда поставлен диагноз? (год/дата)»
– q_reason_need_tsr (textarea) — «Почему нужна новая коляска/приставка/комплектующие?»
Необязательные: q_tsrs_in_ipra (bool), q_deadline_need (date), q_family_info, q_motivation, q_hobby, q_achievements, q_message_to_readers, q_difficulties_ipra_mse, q_difficulties_stage (select), q_can_record_videos, q_additional_message.
Кнопки: «Назад», «Далее».
Прогресс: 75 %.

Что вводим (наш кейс):
Заполняем 4 обязательных поля краткими осмысленными текстами.

API сохранения:
PATCH /draft/patch/ с этими ответами.

Переход:
POST /next/ → current_step = s3_docs.

Ошибки/валидация:
– Пустые обязательные текстовые поля → подсказки под полями.

⸻

Экран 4. Документы и медиа (s3_docs)

Что видит:
– Набор необязательных загрузок file_multi: свидетельство, паспорт(а), ИПРА, мед. заключение, справка об инвалидности, СНИЛС, фото и т. д.
– Переключатель «Подтверждена ли запись на Госуслугах?» (необяз.).
– Кнопки: «Назад», «Отправить заявку».
– Прогресс: 90–100 % (можно показывать «финиш» на отправке).

Что вводим:
В нашем прогоне — ничего (всё необязательно). При желании — загрузки файлов (для file_multi использовать форму с multipart/form-data + отдельные API, если предусмотрены).

Отправка:
Кнопка «Отправить заявку» → POST /api/v1/applications/{public_id}/submit/ → ожидаем { "status":"submitted" }.

Ошибки:
– Если сервер внезапно требует недостающие поля (менялась логика) — показать баннер/модал «Не удалось отправить», подсветить проблемные поля, остаться на экране.

⸻

Экран 5. Успех / Итог

Что видит:
– Иконка/текст «Заявка отправлена»
– Статус: submitted
– Номер заявки: public_id
– Текст: «Мы свяжемся по телефону/email…»
– Кнопки: «На главную», «Создать ещё одну», «Скачать копию заявки (PDF)» (если предусмотрено).

Фоном (по желанию):
– GET /api/v1/applications/{public_id}/ для подтверждения статуса (или сразу использовать тело POST /submit/).

⸻

Попутные состояния/детали UX

A. Возврат в сессию
Если пользователь закрыл вкладку и вернулся (cookie жива):
– GET /api/v1/applications/{public_id}/draft/ → отрисовать current_step, уже введённые answers, продолжить с того места.

B. Индикатор сохранения
– При изменении полей можно триггерить авто-сейв раз в N секунд: PATCH /draft/patch/.
– Показать «Сохранено» / «Сохраняем…» в уголке.

C. Форматирование полей
– Телефон: маска + нормализация к +7XXXXXXXXXX перед отправкой.
– Дата: виджет календаря, проверка «не в будущем» для q_dob.
– Селекты: значения отправлять как value, не label.

D. Ошибки сети
– Плашка «Проблемы со связью. Изменения не потеряются — повторим сохранение.»
– Кнопка «Повторить» поверх PATCH/POST.

E. Навигация
– Хлебные крошки/прогрессбар с шагами: «Введение → Основные данные → История → Документы → Отправка».
– Кнопки «Назад/Далее» и возможный «Сохранить и выйти».

F. Анонимность
– Везде подсказка «Регистрация не требуется. Вы можете отправить заявку без аккаунта.»
– Ещё раз: мы опираемся на cookie-сессию; public_id может храниться в localStorage для восстановления.

⸻

Короткая шпаргалка по соответствию экран ↔ API
	1.	Старт → POST forms/{code}/sessions/ → public_id
	2.	Введение → PATCH {id}/draft/patch/ (q_agree, q_who_fills) → POST {id}/next/
	3.	Основные → PATCH ... (ФИО/дата/город/тел/email/что купить) → POST .../next/
	4.	История → PATCH ... (4 обязательных) → POST .../next/
	5.	Документы → (опциональные загрузки) → POST .../submit/ ⇒ status=submitted
	6.	Успех → (опционально GET {id}/)
