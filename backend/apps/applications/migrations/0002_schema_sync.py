# Generated by Django 5.2.6 on 2025-09-29 21:05

from django.db import migrations


def ensure_schema(apps, schema_editor):
    """Патчит существующую БД, если ранние миграции создавали урезанные таблицы."""

    connection = schema_editor.connection
    cursor = connection.cursor()
    introspection = connection.introspection

    # Helper to list columns for a table.
    def column_names(table: str) -> set[str]:
        return {
            info.name
            for info in introspection.get_table_description(cursor, table)
        }

    table_set = set(introspection.table_names(cursor))

    if "applications_application" in table_set:
        columns = column_names("applications_application")
        if "applicant_type" not in columns:
            cursor.execute(
                "ALTER TABLE applications_application "
                "ADD COLUMN applicant_type varchar(20) NOT NULL DEFAULT ''"
            )
        if "current_stage" not in columns:
            cursor.execute(
                "ALTER TABLE applications_application "
                "ADD COLUMN current_stage integer NOT NULL DEFAULT 0"
            )
        if "updated_at" not in columns:
            cursor.execute(
                "ALTER TABLE applications_application "
                "ADD COLUMN updated_at datetime"
            )
            cursor.execute(
                "UPDATE applications_application SET updated_at = CURRENT_TIMESTAMP "
                "WHERE updated_at IS NULL"
            )

    # Ensure auxiliary tables exist (they might be missing in legacy DBs).
    expected_models = {
        "applications_applicationcomment": "ApplicationComment",
        "applications_applicationstatushistory": "ApplicationStatusHistory",
        "applications_auditlog": "AuditLog",
        "applications_dataconsent": "DataConsent",
    }

    for table_name, model_name in expected_models.items():
        if table_name not in table_set:
            model = apps.get_model("applications", model_name)
            schema_editor.create_model(model)


class Migration(migrations.Migration):

    dependencies = [
        ('applications', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(ensure_schema, migrations.RunPython.noop),
    ]
